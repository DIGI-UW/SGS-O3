map $request_uri $csp_header {
  default "default-src 'self' 'unsafe-inline' 'unsafe-eval'; base-uri 'self'; font-src 'self'; img-src 'self' data:; frame-ancestors 'self' ${FRAME_ANCESTORS};";
  "~^/openmrs/(?:admin|dictionary|module|patientDashboard.form)/" "default-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; base-uri 'self'; font-src 'self'; frame-ancestors 'self';";
  "~^/openmrs/owa" "default-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; base-uri 'self'; font-src 'self' data:; img-src 'self' data:; frame-ancestors 'self';";
}

map $http_x_forwarded_proto $forwarded_proto {
  "~.*" $http_x_forwarded_proto;
  default    $scheme;
}

map $http_x_real_ip $forwarded_ip {
  "~.*"  $http_x_real_ip;
  default $remote_addr;
}

upstream frontend {
  server frontend max_fails=0;
}

upstream backend {
  server backend:8080 max_fails=0;
}

upstream outcomes {
  server outcomes:3000 max_fails=0;
}

upstream proxy {
  server proxy:5000 max_fails=0;
}

# HTTP server (redirect to HTTPS)
server {
  listen 80;
  server_name sgs.uwdigi.org;
  
  # Allow certbot authentication challenge
  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  # Redirect all other HTTP traffic to HTTPS
  location / {
    return 301 https://$host$request_uri;
  }
}

# HTTPS server
server {
  listen 443 ssl;
  server_name sgs.uwdigi.org;
  
  # Let's Encrypt SSL configuration
  ssl_certificate /etc/letsencrypt/live/sgs.uwdigi.org/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/sgs.uwdigi.org/privkey.pem;
  ssl_trusted_certificate /etc/letsencrypt/live/sgs.uwdigi.org/chain.pem;
  
  # Recommended SSL settings
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;
  ssl_stapling on;
  ssl_stapling_verify on;
  
  # HSTS 
  add_header Strict-Transport-Security "max-age=63072000" always;

  add_header X-XSS-Protection "1; mode=block";
  add_header Content-Security-Policy $csp_header;
  add_header X-Content-Type-Options nosniff;

  proxy_set_header      HOST $host;
  proxy_set_header      X-Forwarded-Proto $forwarded_proto;
  proxy_set_header      X-Real-IP $forwarded_ip;
  proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header      Cookie $http_cookie;
  proxy_http_version    1.1;

  # Set secure cookies when using HTTPS
  proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";

  gzip on;
  gzip_vary on;
  gzip_min_length 1024;
  gzip_proxied any;
  gzip_http_version 1.0;
  gzip_types  font/eot
              font/otf
              font/ttf
              image/svg+xml
              text/css
              text/javascript
              text/plain
              text/xml
              application/atom+xml
              application/geo+json
              application/importmap+json
              application/javascript
              application/x-javascript
              application/json
              application/ld+json
              application/fhir+json
              application/fhir+xml
              application/manifest+json
              application/rdf+xml
              application/rss+xml
              application/xhtml+xml
              application/xml;

  absolute_redirect off;

  location = /openmrs/spa {
    return 301 /openmrs/spa/;
  }

  location /openmrs/spa/ {
    proxy_pass http://frontend/;
    proxy_redirect http://$host/ /openmrs/spa/;
  }

  location /openmrs {
    proxy_pass http://backend;
  }

  location /outcomes {
    proxy_pass http://outcomes;
  }

  location /proxy {
    proxy_pass http://proxy;
  }

  location = / {
    return 301 /openmrs/spa/;
  }
}